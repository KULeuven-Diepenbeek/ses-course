<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering Skills</title>
    <link>https://kuleuven-diepenbeek.github.io/ses-course/</link>
    <description>Recent content on Software Engineering Skills</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</webMaster><atom:link href="https://kuleuven-diepenbeek.github.io/ses-course/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.1 Cmdline Java Compiling</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/dependency-management/cmdline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/dependency-management/cmdline/</guid>
      <description>Dit is in principe iets wat je in het INF1 vak onbewust reeds uitvoerde door op de groene &amp;ldquo;Compile&amp;rdquo; knop te drukken van je NetBeans/IntelliJ IDE. Het is belangrijk om te weten welke principes hier achter zitten. Hieronder volgt ter herhaling een kort overzicht over het compileren van Java programma&amp;rsquo;s zonder een buildtool. Voor Kotlin gelden dezelfde regels: vervang dan javac door kotlinc.
Een minimaal programma compileren Als je je JAVA_HOME en PATH omgevingsvariabelen goed hebt ingesteld (zie installatie van gebruikte software), dan kan je in een CMD window de commando&amp;rsquo;s:</description>
    </item>
    
    <item>
      <title>2.2 Java Gradle projecten</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/dependency-management/gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/dependency-management/gradle/</guid>
      <description>Helps teams build, automate and deliver better software, faster.volgens de gradle.org website.
 Wat is dat, een build tool? Gradle is een build tool die de automatisatie van releasen, builden, testen, configureren, dependencies en libraries managen, &amp;hellip; eenvoudiger maakt. Kort gezegd: het maakt het leven van een ontwikkelaar eenvoudiger. In een config bestand genaamd build.gradle schrijft men met Groovy, een dynamische taal bovenop de JVM, op een descriptieve manier hoe Gradle de applicatie moet beheren.</description>
    </item>
    
    <item>
      <title>2.3 Kotlin Gradle projecten</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/dependency-management/kotlin-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/dependency-management/kotlin-gradle/</guid>
      <description>De build.gradle bestanden die tot nu toe in de cursus zijn beschreven (zie 2.1 Java Gradle Projecten), werden geschreven in de Groovy programmeertaal, een multi-purpose dynamische taal voor het Java platform. Aangezien we voor Kotlin projecten geen Groovy, noch Java, maar Kotlin schrijven, zou het fijn zijn om de syntax van de Gradle configuratie óók te kunnen wijzigen naar Kotlin.
Dat kan.
Daarvoor vink je bij het aanmaken van nieuwe projecten in IntelliJ het vinkje Kotlin DSL Build Script aan:</description>
    </item>
    
    <item>
      <title>3.1 TDD In de praktijk</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/tdd/in-de-praktijk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/tdd/in-de-praktijk/</guid>
      <description>The Java way: Mockito Mockito is verreweg het meest populaire Java-specifieke Unit Test Framework dat bovenop JUnit wordt gebruikt om heel snel Test Doubles en integratietesten op te bouwen.
   Lees op https://site.mockito.org hoe je het framework moet gebruiken. (Klik op de knoppen WHY en HOW bovenaan! Volledige javadoc) Denk aan de volgende zaken:
 Hoe include ik Mockito als een dependency in mijn project? Hoe gebruik ik de API om een Test Double/mock aan te maken?</description>
    </item>
    
    <item>
      <title>3.2 TDD Capita Selecta: Algoritmes</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/tdd/capita/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/tdd/capita/</guid>
      <description>Test-First Een algoritme ontwerpen Neem eerst de volgende noties terug door:
 Test Driven Development principes  Dit labo gaan we ons focussen op het praktisch gebruik van TDD en unit testen ter ondersteuning van het opbouwen van een algoritme, ter oplossing van een probleem. Alle TDD concepten zijn reeds uitgelegd in het Test Driven Development labo. We gaan onmiddellijk verder met de oefeningen:
Labo oefeningen Maak zelf een nieuwe  GitHub repository aan&amp;mdash;er zijn geen startprojecten voorzien deze keer.</description>
    </item>
    
    <item>
      <title>5.1 Facade</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/patterns/facade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/patterns/facade/</guid>
      <description>« Terug naar Software Engineering Skills » Naar de labo opgave
&amp;ldquo;Facade&amp;rdquo; - Design Pattern Begeleidende screencast1:
  Doelstelling  Scherm een complex stukje software af met behulp van een simpele interface Voorzie éénzelfde interface naar een set van verschillende mogelijke subsystemen. Een Facade is een high-level interface die mogelijks low-level systemen aanspreekt.  Dive Into Design Patterns: Facade
Voorbeeld 1. Opzet Stel dat we gegevens van de klant moeten versturen naar een overheidsinstantie.</description>
    </item>
    
    <item>
      <title>5.2 Dependency Injection</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/patterns/di/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/patterns/di/</guid>
      <description>&amp;ldquo;Dependency Injection (DI)&amp;quot; - Design Pattern Begeleidende screencast1:
  Doelstelling  Promoot modulariteit door afhankelijkheden te injecteren, zodat aparte modules eenvoudig inplugbaar zijn in andere productiecode. Op deze manier worden modules ook makkelijker tesbaar. Promoot Inversion of Control: een client die services aanroept zou niet mogen weten hoe services worden aangemaakt - deze zou moeten worden &amp;lsquo;geinjecteerd&amp;rsquo;.  Wikipedia: Dependency Injection
Voorbeeld 1. Opzet Als we verder gaan op het voorbeeld van de singleton, zien we dat een database handle nodig is om shopping cart gegevens op te halen.</description>
    </item>
    
    <item>
      <title>5.3 Singleton</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/patterns/singleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/patterns/singleton/</guid>
      <description>&amp;ldquo;Singleton&amp;rdquo; - Design Pattern Begeleidende screencast1:
  Doelstelling  Vermijd de mogelijkheid tot meervoudige instantiatie van een bepaalde klasse. Er kan altijd maar één bepaalde instantie van bestaan. Voorzie een eenvoudige manier om vanuit eender waar in de code toegang te verkrijgen tot die éne instantie. Encapsuleer logica om deze instantie aan te maken, moest code dit raadplegen en dit toevallig de eerste keer zijn (lazy initialization).  Dive Into Design Patterns: Singleton</description>
    </item>
    
    <item>
      <title>5.4 Decorator</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/patterns/decorator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/patterns/decorator/</guid>
      <description>&amp;ldquo;Decorator&amp;rdquo; - Design Pattern Begeleidende screencast1:
  Doelstelling  Voeg dynamisch functionaliteit toe als alternatief voor klassieke overerving. Gedraagt zich zoals het stukje &amp;lsquo;ingepakte&amp;rsquo; functionaliteit, maar voert extra handelingen uit. Wordt in Java altijd via interface implementaties uitegevoerd.  Dive Into Design Patterns: Decorator
Voorbeeld 1. Opzet Stel dat we in een fabriek op plaats X een auto samenstellen. De wagen is een zeer eenvoudige Volkswagen Golf, zonder opties. Op een andere locatie, plaats Y, hebben wij als bedrijf ook fabrieken die sportauto&amp;rsquo;s bouwen (Volkswagen Scirocco) en op plaats Z luxe wagens (Volkswagen Passat).</description>
    </item>
    
    <item>
      <title>5.5 Factory</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/patterns/factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/patterns/factory/</guid>
      <description>&amp;ldquo;Factory&amp;rdquo; - Design Pattern Begeleidende screencast1:
  Doelstelling  Scherm het aanmaken van bepaalde objecten af door middel van overerving en logica, waarbij die logica éénmalig wordt geïmplementeerd, en op een centrale plaats staat. Promoot een modulair model door de verantwoordlijkheid van object creatie en object gebruik te scheiden.  Dive Into Design Patterns: Factory (method)
Voorbeeld 1. Opzet Stel, je wilt aan de kassa van een niet al te grote lokale cinema een film kopen.</description>
    </item>
    
    <item>
      <title>5.6 Catching Patterns in the Wild</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/patterns/catching-patterns-in-the-wild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/patterns/catching-patterns-in-the-wild/</guid>
      <description>De design pattern opgaves tot nu toe zijn vrij kleine self-contained oefeningen geweest die enkel de basisprincipes verduidelijken. In de praktijk worden patronen vooral gecombineerd toegepast. Het is om te beginnen al een kunst om ze te ontdekken in bestaande code.
Een goede softwareingenieur is een ingenieur die ook veel code leest. Een goede schrijver kan niet schrijven zonder te lezen. Hetzelfde is waar voor code schrijven.
Gotta Catch &amp;lsquo;em All   Pokemon Leaf Green op de GBA  De opdracht is misleidend eenvoudig: identificeer in onderstaande codebases de vijf aangeleerde software design patterns.</description>
    </item>
    
    <item>
      <title>6.1 Continuous Integration &amp; Deployment</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/lifecycle/ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/lifecycle/ci/</guid>
      <description>Begeleidende screencast:
  1. Continuous Integration (CI) Het softwareontwikkel proces is een continu proces: als een eerste versie van het product klaar is, en wordt overgemaakt aan klanten, volgt het onderhoud en een mogelijke volgende versie. Elke wijziging maakt potentiëel dingen kapot (geminimaliseerd met TDD), of introduceert nieuwe features. Dat betekent dat bij elke wijziging, een computer het hele build proces moet doorlopen om te controleren of er niets stuk is.</description>
    </item>
    
    <item>
      <title>6.2 Software Management Skills</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/lifecycle/management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/lifecycle/management/</guid>
      <description>De chaos van het Werk De technische kant van het ontwikkelproces is slechts één kant van de medaille. De keerzijde bestaat uit het werk beheren en beheersen, zonder ten prooi te vallen aan de grillen van de klant of de chaos van de organisatie ervan.
Stel, een gemeente vraagt om een nieuwe website te ontwikkelen voor de lokale bibliotheek. Er wordt een vergadering ingepland met stafhouders om samen met jou te beslissen wat de vereisten zijn.</description>
    </item>
    
    <item>
      <title>Gebruikte Software</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/extra/software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/extra/software/</guid>
      <description>Voor deze cursus werken we met Java en met Git. Dat betekent dat JDK 15.0.2 (en de Gradle build tool, v6.7) en een Git client de enige vereisten zijn.
Onderstaande lijst kan helpen bij het installeren en configureren van zulke tools:
Commandline Tools  git-scm gradle  Het is onze intentie om jullie kennis van Linux commando&amp;rsquo;s, opgedaan in het vak Besturingssystemen en C, hier ook van pas te laten komen.</description>
    </item>
    
    <item>
      <title>SESsy Library (1) De WebApp</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/extra/sessy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/extra/sessy/</guid>
      <description>SESsy Library: Een geïntegreerde oefening Download Locatie: op  Github via https://github.com/KULeuven-Diepenbeek/sessylibrary. Zie README.md op de hoofdpagina. SESsy library is:
 A Library Management Simulation WebApp for the &amp;lsquo;SES&amp;rsquo; (Software Engineering Skills) course
   Een boek uitlenen in de SESsy Library webapp.  Installatie Download via bovenstaande Github link, of met git clone. Dit is een &amp;ldquo;Gradle&amp;rdquo; project, die de build van ons Java ecosysteem verzorgt. Dat wil zeggen dat het Gradle systeem automatisch libraries (jar bestanden) download van een centrale repository, moesten die nodig zijn.</description>
    </item>
    
    <item>
      <title>SESsy Library (2) Uitbreidingen</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/extra/sessy-extending/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/extra/sessy-extending/</guid>
      <description>SESsy Library Uitbreiden Lees eerst de installatieinstructies en basics over de SESsy Library app.
Met de SESsy Library WebApp kunnen verstokte lezers (en mensen die boeken nooit terugbrengen) de database van de lokale bibliotheek raadplegen, en eventueel boeken uitlenen. Het is een simpele webapplicatie met een embedded server die standaard op poort 8080 draait, met een minimale front-end interface:
   De codebase bevat echter nog heel wat lijntjes TODO commentaar die door de luie ontwikkelaars nooit zijn geïmplementeerd.</description>
    </item>
    
    <item>
      <title>Taak 1: Open Source Contributie</title>
      <link>https://kuleuven-diepenbeek.github.io/ses-course/extra/taak-oss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/ses-course/extra/taak-oss/</guid>
      <description>De evaluatie van het vak verloopt op twee manieren: 50% examen op papier, 50% praktische taken, waarvan dit één is. Andere taken zullen ook tijdig via Toledo en/of in de lessen worden aangekondigd. Zie de ECTS fiche voor meer informatie betreffrende de puntenverdeling.
Voor deze taak, een open source software (OSS) contributie, leer je de verschillende aspecten die aan bod komen in de hoofdstukken (versiebeheer, continuous integration, dependencies, unit testing, design patterns, &amp;hellip;) toepassen in een real-life omgeving in plaats van een artifiële en netjes afgebakende oefening.</description>
    </item>
    
  </channel>
</rss>
